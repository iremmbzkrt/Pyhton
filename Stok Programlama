# Kullanılacak Modülleri Tanıma
import tkinter as tk
from tkinter.ttk import *
from tkinter import messagebox
import sqlite3
from tkinter import *

# Veri Tabanı Oluşturma

veriler= sqlite3.connect('stok.db') # verileri stok adını verdiğim veritabanı dosyasıyla bağlantılı hale getirdim.
stok = veriler.cursor() #
stok.execute("create table if not exists urun(urun_adi TEXT, urun_fiyati TEXT, urun_kdv TEXT)")
stok.execute("create table if not exists stok(urun_id integer,urun_adi TEXT, adet integer)")
veriler.commit()


# Mesajlar

def msj1(text):
    msj = messagebox.showinfo(text, "Kayıt başarılı!")

def msj2(text):
    msj = messagebox.showerror(text, "Bu ürün zaten var!")

def msj3(text):
    msj = messagebox.showinfo(text, "Kayıt başarıyla silindi!")

def msj4(text):
    msj = messagebox.showinfo(text, "Kayıt güncellendi!")



# Menü Penceresi
def a_menu():
    for i in pen.winfo_children():
        i.destroy()
    pen.title("MENÜ")
    urun_buton = Button(text="Ürün Ekranı", command=urun_pen).place(x=60, y=155, width=150, height=40)
    stok_buton = Button(text="Stok Ekranı", command=stok_menu).place(x=290, y=155, width=150, height=40)

# Ürün Menü Penceresi
def urun_pen():
    # Ürün Kayıt Bölümü
    def urun_ekle():
        a = veri1.get()
        b = veri2.get()
        c = veri3.get()

        def deger():
            stok.execute("insert into urun values(?,?,?)", [a, b, c])
            veriler.commit()

            #Stok Veri Tabanına Yazma
            stok.execute("""SELECT rowid,urun_adi FROM urun""")
            kontrol_ara = stok.fetchall()
            for i in kontrol_ara:
                stok_ad_kontrol = i[1]
                urun_id_no=i[0]
                if stok_ad_kontrol == a:
                    stok.execute("insert into stok values(?,?,?)", [urun_id_no, a, '0'])
                    veriler.commit()

        kod = 0
        stok.execute("""SELECT urun_adi FROM urun""")
        kontrol = stok.fetchall()
        for i in kontrol:
            ad_kontrol = i[0]
            if ad_kontrol == a:
                msj2("Aynı kayıt mevcut!")
                kod = 1
        if kod == 0:
            deger()
            msj1("Kayıt başarılı!")
            veri1.delete(0, "end")
            veri2.delete(0, "end")
            veri3.delete(0, "end")

            for i in liste.get_children():
                liste.delete(i)
            stok.execute("""SELECT rowid,urun_adi,urun_fiyati, urun_kdv  FROM urun""")
            urun_liste = stok.fetchall()
            for i in urun_liste:
                liste.insert(parent='', index='end', values=(i[0], i[1], i[2], i[3]))

    def urun_silme():
        s = veri1.get()
        # Stoktan Kayıt Silme
        stok.execute("""SELECT rowid,urun_adi FROM urun""")
        kontrol_ara = stok.fetchall()
        for i in kontrol_ara:
            stok_ad_kontrol = i[1]
            if stok_ad_kontrol == s:
                sil_id=i[0]
        msg = messagebox.askyesno("Silme işlemi yapıyorsunuz.", "Emin misiniz??")
        if msg == True:
            stok.execute("delete from urun where urun_adi= ? ", [s])
            stok.execute("delete from stok where urun_id= ? ", [sil_id])
            veriler.commit()
            veri1.delete(0, "end")
            veri2.delete(0, "end")
            veri3.delete(0, "end")
            msj3("Kaydınız başarıyla silindi!")
            for i in liste.get_children():
                liste.delete(i)
            stok.execute("""SELECT rowid,urun_adi,urun_fiyati, urun_kdv  FROM urun""")
            urun_liste = stok.fetchall()
            for i in urun_liste:
                liste.insert(parent='', index='end', values=(i[0], i[1], i[2], i[3]))


    # Kayıt Güncelleme
    def urun_güncelleme():
        al = liste.selection()[0]
        item = liste.item(al)
        sec_id_no = item['values'][0]

        stok.execute("update urun set urun_adi='{}', urun_fiyati='{}', urun_kdv='{}' WHERE rowid='{}'".format(veri1.get(),
                                                                                                            veri2.get(),
                                                                                                            veri3.get(),
                                                                                                            sec_id_no))
        veriler.commit()

        veri1.delete(0, "end")
        veri2.delete(0, "end")
        veri3.delete(0, "end")
        msj4("Güncelleme")
        for i in liste.get_children():
            liste.delete(i)
        stok.execute("""SELECT rowid,urun_adi,urun_fiyati, urun_kdv  FROM urun""")
        urun_liste = stok.fetchall()
        for i in urun_liste:
            liste.insert(parent='', index='end', values=(i[0], i[1], i[2], i[3]))



    for i in pen.winfo_children():
        i.destroy()

    pen.title("ÜRÜN")
    Label(text="Ürün Adı", font="Helvetica 12 ").place(x=10, y=30)
    Label(text="Ürün Fiyatı", font="Helvetica 12 ").place(x=10, y=60)
    Label(text="KDV", font="Helvetica 12 ").place(x=10, y=90)

    veri1 = Entry(width=30)
    veri1.place(x=100, y=30)
    veri2 = Entry(width=30)
    veri2.place(x=100, y=60)
    veri3 = Entry(width=30)
    veri3.place(x=100, y=90)

    u_kaydet = Button(text="Kaydet", command=urun_ekle).place(x=300, y=30, width=80, height=30)
    u_guncelle = Button(text="Güncelle", command=urun_güncelleme).place(x=400, y=30, width=80, height=30)
    u_sil = Button(text="Sil", command=urun_silme).place(x=300, y=80, width=80, height=30)
    u_menu = Button(text="Ana Menü", command=a_menu).place(x=400, y=80, width=80, height=30)

    liste = Treeview(pen)
    liste["columns"] = ("id_no", "Ad", "fiyat", "kdv")
    liste.column('#0', width=0, stretch=NO)
    liste.column('id_no', width=20, anchor=CENTER)
    liste.column('Ad', anchor=CENTER, width=220)
    liste.column('fiyat', anchor=CENTER, width=100)
    liste.column('kdv', anchor=CENTER, width=100)

    liste.place(x=20, y=140, width=460, height=180)
    liste.heading("#0", text="")
    liste.heading("id_no", text="ID")
    liste.heading("Ad", text="Ürün Adı")
    liste.heading("fiyat", text="Ürün Fiyatı")
    liste.heading("kdv", text="KDV %")

    stok.execute("""SELECT rowid, urun_adi, urun_fiyati, urun_kdv FROM urun""")
    urun_liste = stok.fetchall()
    for i in urun_liste:
        liste.insert(parent='', index='end', values=(i[0], i[1], i[2], i[3]))

    def aktarma(object):
        veri1.delete(0, "end")
        veri2.delete(0, "end")
        veri3.delete(0, "end")
        veri_al = liste.selection()[0]
        item = liste.item(veri_al)
        veri1.insert(0, item['values'][1])
        veri2.insert(0, item['values'][2])
        veri3.insert(0, item['values'][3])

    liste.bind("<Double-1>", aktarma)


# Stok Menüsü Penceresi
def stok_menu():
    def stok_ekle_cikar(args):
        ekle = int(veri4.get())
        a = combo.get()
        stok.execute("""SELECT urun_adi, adet FROM stok""")
        kontrol_ara = stok.fetchall()
        for i in kontrol_ara:
            stok_ad_kontrol = i[0]
            if stok_ad_kontrol == a:
                mevcut_stok = i[1]
        if args == 1:
            son_stok = mevcut_stok + ekle
        if args==2:
            son_stok = mevcut_stok - ekle
        stok.execute("update stok set adet='{}' WHERE urun_adi='{}'".format(son_stok, a))
        veriler.commit()
        veri4.delete(0, "end")
        for i in liste.get_children():
            liste.delete(i)
        stok.execute("""SELECT urun_id, urun_adi, adet FROM stok""")
        stok_liste = stok.fetchall()
        for i in stok_liste:
            liste.insert(parent='', index='end', values=(i[0], i[1], i[2]))



    for i in pen.winfo_children():
        i.destroy()
    pen.title("STOK")
    s_ekle = Button(text="Ürün Ekleme",command=lambda:stok_ekle_cikar(1)).place(x=20, y=20, width=180, height=30)
    s_cikar = Button(text="Ürün Çıkarma",command=lambda:stok_ekle_cikar(2)).place(x=20, y=60, width=180, height=30)
    s_menu = Button(text="Ana Menü", command=a_menu).place(x=20, y=100, width=180, height=30)

    Label(text="Ürün Adı", font="Verdana 10").place(x=230, y=40)
    Label(text="Ürün Adedi", font="Verdana 10").place(x=230, y=80)

    combo= Combobox()
    combo.place(x=320, y=40)
    stok.execute("""SELECT urun_adi, adet FROM stok""")
    stok_liste = stok.fetchall()
    for i in stok_liste:
        combo['values'] = tuple(list(combo['values']) + [str(i[0])])

    veri4 = Entry(width=26)
    veri4.place(x=320, y=80)

    liste = Treeview(pen)
    liste["columns"] = ("id_no", "Ad", "adet")
    liste.column('#0', width=0, stretch=NO)
    liste.column('id_no', width=20, anchor=CENTER)
    liste.column('Ad', anchor=CENTER, width=220)
    liste.column('adet', anchor=CENTER, width=100)

    liste.place(x=20, y=140, width=460, height=180)
    liste.heading("#0", text="")
    liste.heading("id_no", text="ID")
    liste.heading("Ad", text="Ürün Adı")
    liste.heading("adet", text="Adet")

    stok.execute("""SELECT urun_id,urun_adi, adet FROM stok""")
    stok_liste = stok.fetchall()
    for i in stok_liste:
        liste.insert(parent='', index='end', values=(i[0], i[1], i[2]))

# Pencere Oluşturma
pen = tk.Tk()
pen.geometry("500x350+500+200")
pen.resizable(False, False)
a_menu()

pen.mainloop()
